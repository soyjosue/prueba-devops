name: Devsu

on:
  push:
    branches: ["main"]

jobs:
  build:
    name: Build and Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js 18.15.0
        uses: actions/setup-node@v4
        with:
          node-version: 18.15.0
          cache: "npm"
          cache-dependency-path: ./src/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./src
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ./src/node_modules
          key: node-modules-18.15.0-${{ hashFiles('src/package-lock.json') }}
  test:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: ./src/node_modules
          key: node-modules-18.15.0-${{ hashFiles('src/package-lock.json') }}
      - name: Prepare environment
        run: |
          cp .env.test .env
          mkdir -p ./databases
        working-directory: ./src
      - name: Run tests
        run: npm test
        working-directory: ./src
      - name: Run ESLint
        run: npx eslint . --ext .js,.ts
        working-directory: ./src
      - name: Run tests with coverage
        run: npx jest --coverage
        working-directory: ./src
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./src/coverage
  audit:
    name: NPM Audit Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: ./src/node_modules
          key: node-modules-18.15.0-${{ hashFiles('src/package-lock.json') }}
      - name: Audit dependencies
        run: |
          npm audit --audit-level=moderate || {
            echo "::warning ::Audit completed with issues. Review output.";
          }
        working-directory: ./src
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, audit]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/devsu:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/devsu:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/devsu:cache,mode=max
  scan:
    name: Scan Docker Image with Trivy
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@0.11.1
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/devsu:latest
          format: table
          exit-code: 0
          ignore-unfixed: true
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: scan
    steps:
      - name: Deploy to K8S
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.INFRA_BRIDGE_HOST }}
          username: ${{ secrets.INFRA_BRIDGE_USER }}
          key: ${{ secrets.INFRA_BRIDGE_KEY }}
          script: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/control_plane_key ${{ secrets.CONTROL_PLANE_USER }}@${{ secrets.CONTROL_PLANE_HOST }} << 'ENDSSH'
              set -e

              REPO_NAME=$(basename "${{ github.repository }}")

              rm -rf "$REPO_NAME"

              git clone https://github.com/${{ github.repository }}.git

              cd "$REPO_NAME"

              git checkout ${{ github.ref_name }}

              kubectl apply -f ./k8s

              kubectl rollout restart deployment devsu-deployment -n default
            ENDSSH
